<?php
/**
 * @file
 * Code for the Open Atrium Grassroots Communication feature.
 */

include_once 'oag_communication.features.inc';

/**
 * Implements hook_entity_presave().
 * -> The input format is html and we want a wysiwyg editor!
 * -> By default no notifications are sent when we import a discussion post with feeds!
 */
function oag_communication_entity_presave($entity, $type) {
  if ( $type == 'node' ) {
    if ( $entity->type == 'oa_discussion_post' && isset($entity->feeds_item->id)) {
      if ( $entity->feeds_item->id == 'discussion_post_by_email' ) {

        // Set input format
        $entity->body[LANGUAGE_NONE][0]['format']  = 'panopoly_wysiwyg_text';

        // Send notifications to group
        // @TODO the notifications should be sent to default users/groups
        $space = $entity->og_group_ref[LANGUAGE_NONE][0]['target_id'];
        $entity->oa_notifications = array(
          'source_type' => 'node',
          'source_entity' => $entity,
          'notifications' => array(
            'skip_notify' => 0,
            'team' => array(),
            'user' => array(),
            'group' => array($space),
          )
        );
      }
    }
  }
}

/**
 * Create single cron jobs for importers
 */
define('OAG_COMMUNICATION_JOB_PREFIX', 'oag_communication');
define('OAG_COMMUNICATION_IMPORT_METHOD', 'import');
define('OAG_COMMUNICATION_CLEAR_METHOD', 'clear');

function oag_communication_cronapi() {
    $items = array();
    foreach(oag_communication_jobs() as $job => $title){
        $items[$job] = array(
            'title' => $title,
            'callback' => 'oag_communication_feedjob',
            'callback arguments' => array($job),
            'enabled' => false,
            'settings' => array(),
            'scheduler' => array(
                'name' => 'crontab',
                'crontab' => array(
                    'rules' => array('* * * * *'),
                ),
            ),
            'launcher' => array(
                'name' => 'serial',
                'serial' => array(
                    'thread' => 'any',
                ),
            ),
        );
    }
    return $items;
}

/**
 * List with importers as cron jobs.
 */
function oag_communication_jobs() {
  $jobs = &drupal_static(__FUNCTION__, array());
  if (empty($jobs)) {
    foreach (feeds_importer_load_all(FALSE) as $importer_id => $importer) {
      $jobs[OAG_COMMUNICATION_JOB_PREFIX . '_'. OAG_COMMUNICATION_IMPORT_METHOD .'_' . $importer_id] = t('Import: ') . $importer->config['name'];
      $jobs[OAG_COMMUNICATION_JOB_PREFIX . '_' . OAG_COMMUNICATION_CLEAR_METHOD . '_' . $importer_id] = t('Clear: ') . $importer->config['name'];
    }
  }
  return $jobs;
}

/**
 * Executes importer.
 */
function oag_communication_feedjob($job) {
  $function = $job;
  $job = str_replace(OAG_COMMUNICATION_JOB_PREFIX . '_', '', $job->name);
  $arr = explode('_', $job);
  if ($arr[0] == OAG_COMMUNICATION_IMPORT_METHOD ||
    $arr[0] == OAG_COMMUNICATION_CLEAR_METHOD) {
    $method = $arr[0];
    $importer_id = str_replace($method . '_', '', $job);
	
    $limit = 1;

    // Create an object of type SelectQuery and directly
    // add extra detail to this query object: a condition, fields and a range
    $query = db_select('feeds_source', 'fs');
    $query->condition('fs.id', $importer_id, '=');
    $query->condition('fs.source', '', '!=');
    $query->orderBy('fs.imported', 'ASC');
    $query->fields('fs', array('id', 'feed_nid'));

    if($limit > 0){
      $query->range(0,$limit);
    }

    $result = $query->execute();
    foreach ($result as $record) {
        if(!empty($record)){
            $batch = array(
                'title' => t('Importing !feed_name', array('!feed_name' => $importer_id)),
                'operations' => array(
                    array('feeds_batch', array($method, $importer_id, $record->feed_nid)),
                ),
            );
            batch_set($batch);
            $batch = &batch_get();
            $batch['progressive'] = FALSE;
            batch_process();
        }
    }
  }
}
